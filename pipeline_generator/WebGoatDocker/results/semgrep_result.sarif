{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json", "runs": [{"invocations": [{"executionSuccessful": true, "toolExecutionNotifications": []}], "results": [{"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson8.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 10, "endLine": 94, "startColumn": 9, "startLine": 60}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson9.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 10, "endLine": 86, "startColumn": 9, "startLine": 61}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-container/src/main/java/org/owasp/webgoat/lessons/LessonConnectionInvocationHandler.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 101, "endLine": 28, "startColumn": 13, "startLine": 28}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/introduction/SqlInjectionLesson10.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 10, "endLine": 86, "startColumn": 9, "startLine": 58}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTFinalEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 138, "endLine": 94, "startColumn": 29, "startLine": 94}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-container/src/main/java/org/owasp/webgoat/users/UserService.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 103, "endLine": 51, "startColumn": 9, "startLine": 51}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/sql-injection/src/main/java/org/owasp/webgoat/sql_injection/advanced/SqlInjectionChallenge.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 77, "endLine": 65, "startColumn": 17, "startLine": 63}}}], "message": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "ruleId": "java.lang.security.audit.formatted-sql-string.formatted-sql-string"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/insecure-deserialization/src/main/java/org/owasp/webgoat/deserialization/SerializationHelper.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 48, "endLine": 20, "startColumn": 9, "startLine": 19}}}], "message": {"text": "Found object deserialization using ObjectInputStream. Deserializing entire\nJava objects is dangerous because malicious actors can create Java object\nstreams with unintended consequences. Ensure that the objects being deserialized\nare not user-controlled. If this must be done, consider using HMACs to sign\nthe data stream to make sure it is not tampered with, or consider only\ntransmitting object fields and populating a new object.\n"}, "ruleId": "java.lang.security.audit.object-deserialization.object-deserialization"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 106, "startColumn": 13, "startLine": 106}}}], "message": {"text": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag\nfor cookies instructs the browser to forbid client-side scripts from reading the\ncookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n"}, "ruleId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 111, "startColumn": 13, "startLine": 111}}}], "message": {"text": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag\nfor cookies instructs the browser to forbid client-side scripts from reading the\ncookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n"}, "ruleId": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 106, "startColumn": 13, "startLine": 106}}}], "message": {"text": "Detected cookie without the SameSite attribute.\n"}, "ruleId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 111, "startColumn": 13, "startLine": 111}}}], "message": {"text": "Detected cookie without the SameSite attribute.\n"}, "ruleId": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 106, "startColumn": 13, "startLine": 106}}}], "message": {"text": "A cookie was detected without setting the 'secure' flag. The 'secure' flag\nfor cookies prevents the client from transmitting the cookie over insecure\nchannels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'\n"}, "ruleId": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/jwt/src/main/java/org/owasp/webgoat/jwt/JWTVotesEndpoint.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 40, "endLine": 111, "startColumn": 13, "startLine": 111}}}], "message": {"text": "A cookie was detected without setting the 'secure' flag. The 'secure' flag\nfor cookies prevents the client from transmitting the cookie over insecure\nchannels such as HTTP. Set the 'secure' flag by calling 'cookie.setSecure(true);'\n"}, "ruleId": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag"}, {"locations": [{"physicalLocation": {"artifactLocation": {"uri": "/tmp/src/webgoat-lessons/crypto/src/main/java/org/owasp/webgoat/crypto/HashingAssignment.java", "uriBaseId": "%SRCROOT%"}, "region": {"endColumn": 58, "endLine": 56, "startColumn": 7, "startLine": 56}}}], "message": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"}, "ruleId": "java.lang.security.audit.crypto.weak-hash.use-of-md5"}], "tool": {"driver": {"name": "semgrep", "rules": [{"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "It looks like you're using an implementation of XSSRequestWrapper from dzone.\n(https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html)\nThe XSS filtering in this code is not secure and can be bypassed by malicious actors.\nIt is recommended to use a stack that automatically escapes in your view or templates\ninstead of filtering yourself.\n"}, "id": "java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure", "name": "java.lang.security.audit.xssrequestwrapper-is-insecure.xssrequestwrapper-is-insecure", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A7: Cross-Site Scripting (XSS)"]}, "shortDescription": {"text": "It looks like you're using an implementation of XSSRequestWrapper from dzone.\n(https://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html)\nThe XSS filtering in this code is not secure and can be bypassed by malicious actors.\nIt is recommended to use a stack that automatically escapes in your view or templates\ninstead of filtering yourself.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"}, "id": "java.lang.security.audit.crypto.weak-hash.use-of-sha1", "name": "java.lang.security.audit.crypto.weak-hash.use-of-sha1", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A9: Using Components with Known Vulnerabilities"]}, "shortDescription": {"text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag\nfor cookies instructs the browser to forbid client-side scripts from reading the\ncookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n"}, "id": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly", "name": "java.lang.security.audit.cookie-missing-httponly.cookie-missing-httponly", "properties": {"precision": "very-high", "tags": ["CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "A cookie was detected without setting the 'HttpOnly' flag. The 'HttpOnly' flag\nfor cookies instructs the browser to forbid client-side scripts from reading the\ncookie. Set the 'HttpOnly' flag by calling 'cookie.setHttpOnly(true);'\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"}, "id": "java.lang.security.audit.crypto.weak-hash.use-of-md5", "name": "java.lang.security.audit.crypto.weak-hash.use-of-md5", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A9: Using Components with Known Vulnerabilities"]}, "shortDescription": {"text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected cookie without the SameSite attribute.\n"}, "id": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite", "name": "java.lang.security.audit.cookie-missing-samesite.cookie-missing-samesite", "properties": {"precision": "very-high", "tags": ["CWE-352: Cross-Site Request Forgery (CSRF)", "OWASP-A6: Security Misconfiguration"]}, "shortDescription": {"text": "Detected cookie without the SameSite attribute.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte.\nThis mistake weakens the hash value computed since it introduces more collisions.\nUse 'String.format(\"%02X\", ...)' instead.\n"}, "id": "java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion", "name": "java.lang.security.audit.bad-hexa-conversion.bad-hexa-conversion", "properties": {"precision": "very-high", "tags": ["CWE-704: Incorrect Type Conversion or Cast", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "'Integer.toHexString()' strips leading zeroes from each byte if read byte-by-byte.\nThis mistake weakens the hash value computed since it introduces more collisions.\nUse 'String.format(\"%02X\", ...)' instead.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Using CBC with PKCS5Padding is susceptible to padding orcale attacks. A malicious actor\ncould discern the difference between plaintext with valid or invalid padding. Further,\nCBC mode does not include any integrity checks. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\nUse 'AES/GCM/NoPadding' instead.\n"}, "id": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle", "name": "java.lang.security.audit.cbc-padding-oracle.cbc-padding-oracle", "properties": {"precision": "very-high", "tags": ["CWE-696: Incorrect Behavior Order", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "Using CBC with PKCS5Padding is susceptible to padding orcale attacks. A malicious actor\ncould discern the difference between plaintext with valid or invalid padding. Further,\nCBC mode does not include any integrity checks. See https://find-sec-bugs.github.io/bugs.htm#CIPHER_INTEGRITY.\nUse 'AES/GCM/NoPadding' instead.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "DefaultHttpClient is deprecated. Further, it does not support connections\nusing TLS1.2, which makes using DefaultHttpClient a security hazard.\nUse SystemDefaultHttpClient instead, which supports TLS1.2.\n"}, "id": "java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated", "name": "java.lang.security.audit.crypto.ssl.defaulthttpclient-is-deprecated.defaulthttpclient-is-deprecated", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "DefaultHttpClient is deprecated. Further, it does not support connections\nusing TLS1.2, which makes using DefaultHttpClient a security hazard.\nUse SystemDefaultHttpClient instead, which supports TLS1.2.\n"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double).\nTo test if `$X` is not-a-number, use `Double.isNaN($X)`.\n"}, "id": "java.lang.correctness.eqeq.eqeq", "name": "java.lang.correctness.eqeq.eqeq", "properties": {"precision": "very-high", "tags": []}, "shortDescription": {"text": "`$X == $X` or `$X != $X` is always true. (Unless the value compared is a float or double).\nTo test if `$X` is not-a-number, use `Double.isNaN($X)`.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Application redirects to a destination URL specified by a user-supplied\nparameter that is not validated. This could direct users to malicious locations.\nConsider using an allowlist to validate URLs.\n"}, "id": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect", "name": "java.lang.security.audit.unvalidated-redirect.unvalidated-redirect", "properties": {"precision": "very-high", "tags": ["CWE-601: URL Redirection to Untrusted Site ('Open Redirect')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Application redirects to a destination URL specified by a user-supplied\nparameter that is not validated. This could direct users to malicious locations.\nConsider using an allowlist to validate URLs.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected potential code injection using ScriptEngine. Ensure\nuser-controlled data cannot enter '.eval()', otherwise, this is\na code injection vulnerability.\n"}, "id": "java.lang.security.audit.script-engine-injection.script-engine-injection", "name": "java.lang.security.audit.script-engine-injection.script-engine-injection", "properties": {"precision": "very-high", "tags": ["CWE-94: Improper Control of Generation of Code ('Code Injection')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Detected potential code injection using ScriptEngine. Ensure\nuser-controlled data cannot enter '.eval()', otherwise, this is\na code injection vulnerability.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected empty trust manager implementations. This is dangerous because it accepts any\ncertificate, enabling man-in-the-middle attacks. Consider using a KeyStore\nand TrustManagerFactory isntead.\nSee https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\nfor more information.\n"}, "id": "java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager", "name": "java.lang.security.audit.crypto.ssl.insecure-trust-manager.insecure-trust-manager", "properties": {"precision": "very-high", "tags": ["CWE-295: Improper Certificate Validation", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "Detected empty trust manager implementations. This is dangerous because it accepts any\ncertificate, enabling man-in-the-middle attacks. Consider using a KeyStore\nand TrustManagerFactory isntead.\nSee https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\nfor more information.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}, "id": "java.lang.security.audit.formatted-sql-string.formatted-sql-string", "name": "java.lang.security.audit.formatted-sql-string.formatted-sql-string", "properties": {"precision": "very-high", "tags": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Detected a formatted string in a SQL statement. This could lead to SQL\ninjection if variables in the SQL statement are not properly sanitized.\nUse a prepared statements (java.sql.PreparedStatement) instead. You\ncan obtain a PreparedStatement using 'connection.prepareStatement'.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "NullCipher was detected. This will not encrypt anything;\nthe cipher text will be the same as the plain text. Use\na valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\nSee https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\nfor more information.\n"}, "id": "java.lang.security.audit.crypto.no-null-cipher.no-null-cipher", "name": "java.lang.security.audit.crypto.no-null-cipher.no-null-cipher", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "NullCipher was detected. This will not encrypt anything;\nthe cipher text will be the same as the plain text. Use\na valid, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\nSee https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\nfor more information.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "A cookie was detected without setting the 'secure' flag. The 'secure' flag\nfor cookies prevents the client from transmitting the cookie over insecure\nchannels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n"}, "id": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "name": "java.lang.security.audit.cookie-missing-secure-flag.cookie-missing-secure-flag", "properties": {"precision": "very-high", "tags": ["CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "A cookie was detected without setting the 'secure' flag. The 'secure' flag\nfor cookies prevents the client from transmitting the cookie over insecure\nchannels such as HTTP. Set the 'secure' flag by calling '$COOKIE.setSecure(true);'\n"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User\ninput was detected going directly from the HttpServletRequest into output. Ensure your\ndata is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n"}, "id": "java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss", "name": "java.lang.security.servletresponse-writer-xss.servletresponse-writer-xss", "properties": {"precision": "very-high", "tags": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "OWASP-A7: Cross-Site Scripting ('XSS')"]}, "shortDescription": {"text": "Cross-site scripting detected in HttpServletResponse writer with variable '$VAR'. User\ninput was detected going directly from the HttpServletRequest into output. Ensure your\ndata is properly encoded using org.owasp.encoder.Encode.forHtml: 'Encode.forHtml($VAR)'.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Found object deserialization using ObjectInputStream. Deserializing entire\nJava objects is dangerous because malicious actors can create Java object\nstreams with unintended consequences. Ensure that the objects being deserialized\nare not user-controlled. If this must be done, consider using HMACs to sign\nthe data stream to make sure it is not tampered with, or consider only\ntransmitting object fields and populating a new object.\n"}, "id": "java.lang.security.audit.object-deserialization.object-deserialization", "name": "java.lang.security.audit.object-deserialization.object-deserialization", "properties": {"precision": "very-high", "tags": ["CWE-502: Deserialization of Untrusted Data", "OWASP-A8: Insecure Deserialization"]}, "shortDescription": {"text": "Found object deserialization using ObjectInputStream. Deserializing entire\nJava objects is dangerous because malicious actors can create Java object\nstreams with unintended consequences. Ensure that the objects being deserialized\nare not user-controlled. If this must be done, consider using HMACs to sign\nthe data stream to make sure it is not tampered with, or consider only\ntransmitting object fields and populating a new object.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected anonymous LDAP bind.\nThis permits anonymous users to execute LDAP statements. Consider enforcing\nauthentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html\nfor more information.\n"}, "id": "java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind", "name": "java.lang.security.audit.anonymous-ldap-bind.anonymous-ldap-bind", "properties": {"precision": "very-high", "tags": ["CWE-287: Improper Authentication", "OWASP-A2: Broken Authentication"]}, "shortDescription": {"text": "Detected anonymous LDAP bind.\nThis permits anonymous users to execute LDAP statements. Consider enforcing\nauthentication for LDAP. See https://docs.oracle.com/javase/tutorial/jndi/ldap/auth_mechs.html\nfor more information.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "XMLDecoder should not be used to parse untrusted data.\nDeserializing user input can lead to arbitrary code execution.\nUse an alternative and explicitly disable external entities.\nSee https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\nfor alternatives and vulnerability prevention.\n"}, "id": "java.lang.security.audit.xml-decoder.xml-decoder", "name": "java.lang.security.audit.xml-decoder.xml-decoder", "properties": {"precision": "very-high", "tags": ["CWE-611: Improper Restriction of XML External Entity Reference", "OWASP-A4: XML External Entities (XXE)"]}, "shortDescription": {"text": "XMLDecoder should not be used to parse untrusted data.\nDeserializing user input can lead to arbitrary code execution.\nUse an alternative and explicitly disable external entities.\nSee https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\nfor alternatives and vulnerability prevention.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "This socket is not encrypted.\nThe traffic could be read by an attacker intercepting the network traffic.\nUse an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory'\ninstead\n"}, "id": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket", "name": "java.lang.security.audit.crypto.unencrypted-socket.unencrypted-socket", "properties": {"precision": "very-high", "tags": ["CWE-319: Cleartext Transmission of Sensitive Information", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "This socket is not encrypted.\nThe traffic could be read by an attacker intercepting the network traffic.\nUse an SSLSocket created by 'SSLSocketFactory' or 'SSLServerSocketFactory'\ninstead\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Detected non-constant data passed into an LDAP query. If this data can be\ncontrolled by an external user, this is an LDAP injection.\nEnsure data passed to an LDAP query is not controllable; or properly sanitize\nthe data.\n"}, "id": "java.lang.security.audit.ldap-injection.ldap-injection", "name": "java.lang.security.audit.ldap-injection.ldap-injection", "properties": {"precision": "very-high", "tags": ["CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Detected non-constant data passed into an LDAP query. If this data can be\ncontrolled by an external user, this is an LDAP injection.\nEnsure data passed to an LDAP query is not controllable; or properly sanitize\nthe data.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Initialization Vectors (IVs) for block ciphers should be randomly generated\neach time they are used. Using a static IV means the same plaintext\nencrypts to the same ciphertext every time, weakening the strength\nof the encryption.\n"}, "id": "java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector", "name": "java.lang.security.audit.crypto.no-static-initialization-vector.no-static-initialization-vector", "properties": {"precision": "very-high", "tags": ["CWE-329: Not Using a Random IV with CBC Mode", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "Initialization Vectors (IVs) for block ciphers should be randomly generated\neach time they are used. Using a static IV means the same plaintext\nencrypts to the same ciphertext every time, weakening the strength\nof the encryption.\n"}}, {"defaultConfiguration": {"level": "note"}, "fullDescription": {"text": "Older Java application servers are vulnreable to HTTP response splitting, which may occur if an HTTP\nrequest can be injected with CRLF characters. This finding is reported for completeness; it is recommended\nto ensure your environment is not affected by testing this yourself.\n"}, "id": "java.lang.security.audit.http-response-splitting.http-response-splitting", "name": "java.lang.security.audit.http-response-splitting.http-response-splitting", "properties": {"precision": "very-high", "tags": ["CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Older Java application servers are vulnreable to HTTP response splitting, which may occur if an HTTP\nrequest can be injected with CRLF characters. This finding is reported for completeness; it is recommended\nto ensure your environment is not affected by testing this yourself.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "A formatted or concatenated string was detected as input to a java.lang.Runtime call.\nThis is dangerous if a variable is controlled by user input and could result in a\ncommand injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n"}, "id": "java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call", "name": "java.lang.security.audit.command-injection-formatted-runtime-call.command-injection-formatted-runtime-call", "properties": {"precision": "very-high", "tags": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "A formatted or concatenated string was detected as input to a java.lang.Runtime call.\nThis is dangerous if a variable is controlled by user input and could result in a\ncommand injection. Ensure your variables are not controlled by users or sufficiently sanitized.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Cryptographic algorithms are notoriously difficult to get right. By implementing\na custom message digest, you risk introducing security issues into your program.\nUse one of the many sound message digests already available to you:\nMessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\n"}, "id": "java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests", "name": "java.lang.security.audit.crypto.ssl.avoid-implementing-custom-digests.avoid-implementing-custom-digests", "properties": {"precision": "very-high", "tags": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "Cryptographic algorithms are notoriously difficult to get right. By implementing\na custom message digest, you risk introducing security issues into your program.\nUse one of the many sound message digests already available to you:\nMessageDigest sha256Digest = MessageDigest.getInstance(\"SHA256\");\n"}}, {"defaultConfiguration": {"level": "error"}, "fullDescription": {"text": "Detected a potential path traversal. A malicious actor\ncould control the location of this file, to include going backwards\nin the directory with '../'. To address this, ensure that user-controlled\nvariables in file paths are sanitized. You may aslso consider using a utility\nmethod such as org.apache.commons.io.FilenameUtils.getName(...) to only\nretrieve the file name from the path.\n"}, "id": "java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal", "name": "java.lang.security.httpservlet-path-traversal.httpservlet-path-traversal", "properties": {"precision": "very-high", "tags": ["CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "OWASP-A1: Injection"]}, "shortDescription": {"text": "Detected a potential path traversal. A malicious actor\ncould control the location of this file, to include going backwards\nin the directory with '../'. To address this, ensure that user-controlled\nvariables in file paths are sanitized. You may aslso consider using a utility\nmethod such as org.apache.commons.io.FilenameUtils.getName(...) to only\nretrieve the file name from the path.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "Insecure HostnameVerifier implementation detected. This will accept\nany SSL certificate with any hostname, which creates the possibility\nfor man-in-the-middle attacks.\n"}, "id": "java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier", "name": "java.lang.security.audit.crypto.ssl.insecure-hostname-verifier.insecure-hostname-verifier", "properties": {"precision": "very-high", "tags": ["CWE-295: Improper Certificate Validation", "OWASP-A6: Security Misconfiguration"]}, "shortDescription": {"text": "Insecure HostnameVerifier implementation detected. This will accept\nany SSL certificate with any hostname, which creates the possibility\nfor man-in-the-middle attacks.\n"}}, {"defaultConfiguration": {"level": "warning"}, "fullDescription": {"text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\nare considered weak encryption and are deprecated.\nUse SSLContext.getInstance(\"TLSv1.2\") for the best security.\n"}, "id": "java.lang.security.audit.weak-ssl-context.weak-ssl-context", "name": "java.lang.security.audit.weak-ssl-context.weak-ssl-context", "properties": {"precision": "very-high", "tags": ["CWE-326: Inadequate Encryption Strength", "OWASP-A3: Sensitive Data Exposure"]}, "shortDescription": {"text": "An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\nare considered weak encryption and are deprecated.\nUse SSLContext.getInstance(\"TLSv1.2\") for the best security.\n"}}], "semanticVersion": "0.54.0"}}}], "version": "2.1.0"}